<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Edt</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-13T17:26:25.831Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>edgration</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次CF</title>
    <link href="http://yoursite.com/2020/08/14/CF01/"/>
    <id>http://yoursite.com/2020/08/14/CF01/</id>
    <published>2020-08-13T16:46:55.000Z</published>
    <updated>2020-08-13T17:26:25.831Z</updated>
    
    <content type="html"><![CDATA[<p>low-level.jpg：</p><p><img src="/images/CF01/rating.png" alt="CFRound664Div2"></p><p>I got a Wrong Answer on A, Failed in system testing in problem B since the algorithm I wrote is ridiculous, which I can’t explain the reason accurately. Despite to the failure I made, the Problem C is much simple and ordinary, which only cost me 10 minute to read and wrote. However I did not reason the problem carefully so I spend too much time on writing a wrong solution, even if I came up with the correct solution later, I did not finish it due to the structure of the program is hard to change and I have to fix the bugs in the program.</p><p>A题瞎写WA一次；B题瞎写FST on Test45，最后发现自己的算法假的离谱，一个5×5的矩阵就能叉掉（就算如此还混过了pretest）；D题瞎写，计数的时候要把所用东西加起来，ans的初始值写-1（写0就行了），而且在莫名其妙的位置还爆了个int（两个1e5乘起来了）。</p><p>下次要注意细节了，不能再想当然。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;low-level.jpg：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/CF01/rating.png&quot; alt=&quot;CFRound664Div2&quot;&gt;&lt;/p&gt;
&lt;p&gt;I got a Wrong Answer on A, Failed in system testing
      
    
    </summary>
    
    
      <category term="Code" scheme="http://yoursite.com/categories/Code/"/>
    
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>RSA算法</title>
    <link href="http://yoursite.com/2020/08/02/RSA/"/>
    <id>http://yoursite.com/2020/08/02/RSA/</id>
    <published>2020-08-02T08:02:49.000Z</published>
    <updated>2020-08-04T14:56:37.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对称-非对称加密"><a href="#对称-非对称加密" class="headerlink" title="对称/非对称加密"></a>对称/非对称加密</h1><p>在1976年前，所有方法都是对称加密算法。</p><p>Alice想出一种可逆加密方法，把加密方法告诉Bob，Bob加密了消息把密码发给Alice，Alice根据加密方法解密。</p><p>要是别人截获了消息和加密方法，或者根据密码推测出加密方法，那么就能获得密码信息。</p><p>1976年，<a href="https://zh.wikipedia.org/wiki/迪菲-赫爾曼密鑰交換">Diffie–Hellman_key</a>提供了一种非堆成加密的思想。</p><p>Alice有两个密钥，公钥和私钥，把公钥告诉Bob，Bob加密了把消息把密码发给Alice，Alice用私钥解密。</p><p>非对称加密方法的好处是私钥是保存在电脑的，也就是无论别人窃取什么东西，没有私钥也无法解密。</p><p>RSA算法就是一种现在普遍使用的非对称加密算法。</p><h1 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a>RSA算法</h1><h2 id="构造过程"><a href="#构造过程" class="headerlink" title="构造过程"></a>构造过程</h2><p><a href="https://zh.wikipedia.org/zh-cn/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95">维基百科-RSA算法</a></p><ol><li><p>凭空变出两个质数$p,q$。</p></li><li><p>设$N=p\times q$</p></li><li><p>根据欧拉函数$r=\varphi(N)=(p-1)\times (q-1)$</p></li><li><p>凭空变出一个小于$r$的整数$e$使得$e$和$r$互质。</p></li><li><p>求$d$使得$ed \equiv 1 \pmod{r} $</p></li><li><p>销毁$p,q$，没有人知道$p,q$是多少。</p></li></ol><p>得出$(N,e)$是公钥，$(N,d)$是私钥。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>Alice得到公钥和私钥，Alice把公钥告诉Bob，自己把私钥藏起来不告诉任何人。</p><p>Bob给Alice发消息。</p><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>假设Bob的消息是$n$，密码是$c$，手上有公钥$(N,e)$</p><script type="math/tex; mode=display">c\equiv n^e \pmod{N}</script><p>Bob将加密后的$c$发给Alice</p><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>Alice得到密码c，根据私钥$(N,d)$</p><script type="math/tex; mode=display">n\equiv c^d\pmod{N}</script><p>解密得到$n$</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><script type="math/tex; mode=display">c\equiv n^e \pmod{N}\\c^d\equiv n^{e\cdot d} \pmod{N}</script><p>因为$e\cdot d\equiv 1 \pmod{r}$，即$e\cdot d\equiv h\cdot r+1\pmod {N}$，其中$h$是自然数。</p><p>式子又可以写成</p><script type="math/tex; mode=display">c^d\equiv n^{h\cdot r+1} \pmod{N}\\c^d\equiv n^{h\cdot \varphi(N)+1}\pmod{N}\\c^d\equiv n\cdot n^{h\cdot \varphi(N)}\pmod{N}\\c^d\equiv n\cdot ({n^{\varphi(N)}})^h\pmod{N}\\</script><p>根据欧拉定理$a^\varphi(n)\equiv 1\pmod{n}$</p><script type="math/tex; mode=display">c^d\equiv n\times 1^h \pmod{N}\\c^d\equiv n \pmod{N}</script><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>假设窃取者得到了$(N,e)$以及加密后的密码$c$，没有获得Alice的私钥$d$。鉴于多次剩余并不可求，目前唯一已知的（已公布的）方法就是将$N$分解质因数。</p><p>将$N$分解质因数得到$N=pq$，然后可以得到$r=\varphi(N)=(p-1)\times (q-1)$，根据$ed\equiv 1\pmod{r}$得到$d$。</p><p>所以目前认为只要$N$够大，黑客就没办法了。目前推荐的$N$的长度至少为2048位，不然可以很快分解。</p><p>已经证明量子计算机可以在多项式时间内进行因数分解。</p><p>如果量子计算机成型，RSA算法将被淘汰。</p><h2 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h2><h3 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h3><p>首先生成$N$，方法是用一个非常好的，而且没有被发表的方法（不会被窃取）随机生成一个看起来像质数的大数，然后用概率算法（类似Miller-Rabin）检验是否是质数。如果能通过测试，则进行精确的测试确保是一个质数。</p><p>$p$和$q$不能太靠近，而且$p-1$和$q-1$的因子不能太小。</p><p>$d$必须大。1990年有人证明$q&lt;p&lt;2q,d&lt;\frac{1}{3}N^{\frac{1}{4}}$，那么很好算出$d$。<br>以上证明我都不知道怎么证的，但是了解一下就好。</p><p>e=2永远不能用。</p><h3 id="算法速度"><a href="#算法速度" class="headerlink" title="算法速度"></a>算法速度</h3><p>由于要求很多以及计算过程比较复杂，RSA比较慢。实际运用（如TLS）是结合了非对称加密（如RSA）和一些对称加密（AES）</p><h3 id="密钥分配"><a href="#密钥分配" class="headerlink" title="密钥分配"></a>密钥分配</h3><p>假设Eve在Alice和Bob中间传话，把Alice告诉他的公钥独吞，告诉Bob自己的公钥，然后传递信息的时候先解密Bob的信息然后加密发给Alice，那么Alice和Bob甚至不知道有人窃取了信息。</p><p>现在人们通过一个<a href="https://zh.wikipedia.org/wiki/公開金鑰基礎建設">可信的第三者</a>来解决这一问题。即证书中心，一个可信的数字认证机构将用户的个人身份和公钥连接在一起，确定这个公钥就是Alice的而不是Eve窃取以后更改的。这个问题的前提是人们信赖第三方机构。</p><h3 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h3><p><strong>因数分解</strong></p><p>2009年 <a href="https://eprint.iacr.org/2010/006.pdf">RSA-768(768bit)被成功分解</a></p><p><strong>时间攻击</strong></p><p><a href="http://crypto.stanford.edu/~dabo/papers/ssl-timing.pdf">Paper</a></p><p>Even要是知道Alicze对特定密码的加密时间以及了解Alice的硬件设备，可能可以根据加密时取模的时间计算，因为1比0花的时间要多，可以推算出$d$。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对称-非对称加密&quot;&gt;&lt;a href=&quot;#对称-非对称加密&quot; class=&quot;headerlink&quot; title=&quot;对称/非对称加密&quot;&gt;&lt;/a&gt;对称/非对称加密&lt;/h1&gt;&lt;p&gt;在1976年前，所有方法都是对称加密算法。&lt;/p&gt;
&lt;p&gt;Alice想出一种可逆加密方法，把
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>ATCF题集-1</title>
    <link href="http://yoursite.com/2020/08/01/ATCF-1/"/>
    <id>http://yoursite.com/2020/08/01/ATCF-1/</id>
    <published>2020-08-01T08:14:29.000Z</published>
    <updated>2020-08-02T07:56:55.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Multiplication-4"><a href="#Multiplication-4" class="headerlink" title="Multiplication 4"></a><a href="https://atcoder.jp/contests/abc173/tasks/abc173_e">Multiplication 4</a></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给$n$个数字，选择$k$个数字乘积最大，输出答案</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>如果是偶数个数相乘，一定是最大的。按照正数和负数分开算的话有点麻烦，不如按组单独算。先把数组排序，可以证明<strong>答案是连续段（最多两段）</strong>，如果有左边的段，那一定是以最小值开头，有右边的话一定是以最大值结尾的。</p><p>证明如下：</p><p>首先，选择中间的数一定不如极值，因为无论怎样最大最小值中至少有一个比中间的数好。所以段一定是以最小值开头或者最大值结尾的。</p><p>如果两端都是正数/负数，显然合并成一段更优秀，这个时候就是一段。</p><p>那么一定是负数正数组成的段，考虑在中间选一个数（第三段）替换两段中的，同上，当然也不如极大/极小值。</p><p>所以可以假设现在是$[1\sim L]$和$[R \sim n]$，那么我们比较$a[L+1]\times a[L+2]$和$a[R]\times a[R+1]$的大小，决定是否$L+=2,R+=2$。</p><p>需要注意的是，如果相等的话要继续比较，因为并不单调。eg: 负负 负负 … 负正 正正，$a3\times a4=a7\times a8,a_1\times a_2 &lt; a_5\times a_6$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x); <span class="keyword">return</span> x;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, k, a[maxn];</span><br><span class="line"><span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>(), k = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) a[i] = <span class="built_in">read</span>();</span><br><span class="line">    sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n - k + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r &amp;&amp; r &lt;= n - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1l</span>l * a[l] * a[l + <span class="number">1</span>] &gt;= <span class="number">1l</span>l * a[r] * a[r + <span class="number">1</span>]) l += <span class="number">2</span>, r += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[n] &lt; <span class="number">0</span> &amp;&amp; k &amp; <span class="number">1</span>) l = <span class="number">1</span>, r = n - k + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; l; ++i) ans = <span class="number">1l</span>l * ans * ((a[i] + mod) % mod) % mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = r; i &lt;= n; ++i) ans = <span class="number">1l</span>l * ans * ((a[i] + mod) % mod) % mod;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Strivore"><a href="#Strivore" class="headerlink" title="Strivore"></a><a href="https://atcoder.jp/contests/abc171/tasks/abc171_f">Strivore</a></h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>给一个小写字母字符串$S$，随便在什么位置插入一个字符$K$次，最后能得到什么字符串，取模。</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>直接计算非常难算，因为会有很多重复的情况。我们可以考虑$S$作为一个子序列在新的字符串中第一次出现的每个字母的位置，这样计算的话不会有重复。</p><p>首先先固定每个字母作为子序列出现的位置。对于位置非$S$的位置$i$，如果在$S_n$之前，那么不能填下一个$S$的字符（因为填了的话S的子序列位置就是$i$了）；如果在$S_n$之后就可以随便填。那么就是$25^a\times 26^{K+N-a}$。</p><p>那么枚举$a$，那么确定$Sn$ 的新位置是$S_{a+n}$，剩下的$n-1$个数在$n+a-1$个位置里面选，乘上$\binom{n+a-1}{a-1}$就行了。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> fac[maxn], ifac[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1l</span>l * x * y % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpw</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = y; i; i &gt;&gt;= <span class="number">1</span>, x = mul(x, x))</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>) r = mul(r, x);</span><br><span class="line">    <span class="keyword">return</span> r; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> fpw(x, mod - <span class="number">2</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123; <span class="keyword">return</span> mul(x, mul(y, z)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123; <span class="keyword">return</span> mul(fac[n], ifac[m], ifac[n - m]); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x); <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">        freopen(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    n = <span class="built_in">read</span>(); <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s); m = <span class="built_in">strlen</span>(s);</span><br><span class="line">    fac[<span class="number">0</span>] = ifac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + m; ++i) fac[i] = mul(fac[i - <span class="number">1</span>], i), ifac[i] = mul(ifac[i - <span class="number">1</span>], inv(i)); </span><br><span class="line">    <span class="comment">// new length = m + n</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        ans += mul(mul(C(m + i - <span class="number">1</span>, i), fpw(<span class="number">25</span>, i)), fpw(<span class="number">26</span>, n - i));</span><br><span class="line">        ans %= mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h1 id="Camel-Train"><a href="#Camel-Train" class="headerlink" title="Camel Train"></a>Camel Train</h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>有$n$个骆驼排队，第$i$个骆驼要是能排在前$K_i$个则能获得$L_i$都愉悦度，不在前$K_i$个获得$R_i$的愉悦度。如何排队才能获得最大愉悦度。</p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>首先可以先把$min(L_i,R_i)$加到答案上，这样的话把骆驼分为两类，如果$L_i&gt;R_i$，排在前$K_i$的获得$L_i-R_i$；如果$L_i&lt;R_i$，排在后$n-K_i$的获得$R_i-L_i$愉悦度。</p><p>可以发现这两种骆驼是可以分开算的，因为一个区间是$[1,L]$一个区间是$[R,n]$，如果占用了位置，可以把两个骆驼交换位置。</p><p>那么按照从大到小，贪心的计算。</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x); <span class="keyword">return</span> x;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="keyword">int</span> n, a[maxn], b[maxn];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; a, <span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.first == b.first ? a.second &gt; b.second : a.first &gt; b.first;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;&amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;X;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) X.insert(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;u = a[i];</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator It = X.upper_bound(u.second);</span><br><span class="line">        <span class="keyword">if</span> (It != X.<span class="built_in">begin</span>()) &#123;</span><br><span class="line">            X.erase(--It);</span><br><span class="line">            ans += u.first;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">        freopen(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> T = <span class="built_in">read</span>(); </span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;L, R;</span><br><span class="line">        n = <span class="built_in">read</span>(); ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = <span class="built_in">read</span>(), l = <span class="built_in">read</span>(), r = <span class="built_in">read</span>();</span><br><span class="line">            ans += <span class="built_in">min</span>(l, r);</span><br><span class="line">            <span class="keyword">if</span> (l &gt; r) L.push_back(<span class="built_in">make_pair</span>(l - r, k));</span><br><span class="line">            <span class="keyword">else</span> R.push_back(<span class="built_in">make_pair</span>(r - l, n - k));</span><br><span class="line">        &#125;</span><br><span class="line">        sort(L.<span class="built_in">begin</span>(), L.<span class="built_in">end</span>(), cmp);</span><br><span class="line">        sort(R.<span class="built_in">begin</span>(), R.<span class="built_in">end</span>(), cmp);</span><br><span class="line">        Solve(L); Solve(R);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="String-Transformation-1"><a href="#String-Transformation-1" class="headerlink" title="String Transformation 1"></a><a href="https://codeforces.com/contest/1384/problem/C">String Transformation 1</a></h1><h2 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h2><p>给出字符串$A$和$B$，每次进行如下操作：</p><p>选择A中的几个位置，要求这几个位置是一样的字母。即选出$p[1\sim n]$满足$A[p_i]$是同一个字母$x$。然后把这些$x$全部替换成$y$，要求$y&gt;x$。</p><p>求把$A$变成$B$的最小操作次数。</p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>可以按照字母划分，根据字母$A$变成字母$B$，可以建立一个图出来。然后可以发现，一个大小为$n$的联通块只需要$n-1$次就能完成，用并查集计算即可。</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> fa[maxn], n, a[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn], t[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">return</span> x;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findf</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fa[x] == x ? x : fa[x] = findf(fa[x]);    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = findf(x), p = findf(y);</span><br><span class="line">    fa[t] = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">        freopen(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> T = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; ++i) fa[i] = i; </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>); <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, t + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">bool</span> fff = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (s[i] &gt; t[i]) &#123; fff = <span class="number">1</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (fff) &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = s[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>, y = t[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (findf(x) == findf(y)) <span class="keyword">continue</span>;</span><br><span class="line">            merge(x, y); ans++; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="Cyclic-Shifts-Sorting"><a href="#Cyclic-Shifts-Sorting" class="headerlink" title="Cyclic Shifts Sorting"></a><a href="https://codeforces.com/contest/1374/problem/F">Cyclic Shifts Sorting</a></h1><h2 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h2><p>定义一次操作把$a[i],a[i+1],a[i+2]$的位置变成$a[i+2],a[i],a[i+1]$，求把一个数列排序的操作方法，最多能操作$n^2$次（不需要最小次数，可能无法排序），$n \leq 500$。</p><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><p>可以从小到大对把第i个数放到第i个位置。把$i$向左移动两次需要一次操作，向左移动一次需要两次操作。这样操作以后，如果最后两个数没有排好就是不行。</p><p>对于每个数字不同的序列这个结论成立。</p><p>但是比如说 <code>1 2 3 3 6 4</code></p><p>可以交换相同的数字的位置，并且排序后面的<code>6 4</code>，这个结论就有问题了。</p><p>考虑到排序其实是消除逆序对，一次操作一定要么<strong>没改变</strong>，要么增加/减少了<strong>两个逆序对</strong>。</p><p>把<code>a b c</code>变成<code>c a b</code>，相对于其他的数位置关系没变，改变的是<code>c</code>和<code>a b</code>之间的位置关系。 </p><p>如果<code>a,b&lt;c</code>或者<code>c&lt;a,b</code>那么一次操作改变了两个逆序对，如果<code>c</code>在<code>ab</code>中间，那么没改变。</p><p>所以，如果有偶数个逆序对，一定可以排序。</p><p>如果是奇数个逆序对，而且如果没有相同的数，就不能排序。</p><p>但是，有相同的数的时候，可以把随便一对相同的数看成一个逆序对，构造出偶数个逆序对，就能排序了。</p><h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x); <span class="keyword">return</span> x;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], c[maxn], d[maxn];</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;b[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> bef)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; x &lt;&lt; &#x27; &#x27; &lt;&lt; bef &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">while</span> (x &gt; bef + <span class="number">1</span>) &#123;</span><br><span class="line">        ans.push_back(x - <span class="number">2</span>);    </span><br><span class="line">        <span class="comment">// x - 2 x - 1 x</span></span><br><span class="line">        c[d[x]] -= <span class="number">2</span>;</span><br><span class="line">        c[d[x - <span class="number">1</span>]]++;</span><br><span class="line">        c[d[x - <span class="number">2</span>]]++;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> t = d[x];</span><br><span class="line">        d[x] = d[x - <span class="number">1</span>]; d[x - <span class="number">1</span>] = d[x - <span class="number">2</span>]; d[x - <span class="number">2</span>] = t;</span><br><span class="line">        </span><br><span class="line">        x -= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x == bef + <span class="number">1</span>) &#123;</span><br><span class="line">        ans.push_back(bef);</span><br><span class="line">        ans.push_back(bef);</span><br><span class="line">        </span><br><span class="line">        c[d[x]]--; c[d[x + <span class="number">1</span>]]--;</span><br><span class="line">        c[d[x - <span class="number">1</span>]] += <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> t = d[x];</span><br><span class="line">        d[x] = d[x + <span class="number">1</span>]; d[x + <span class="number">1</span>] = d[x - <span class="number">1</span>]; d[x - <span class="number">1</span>] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) Move(c[b[i].second], i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">        freopen(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">read</span>(); ans.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) a[i] = <span class="built_in">read</span>(), b[i] = <span class="built_in">make_pair</span>(a[i], i), c[i] = i, d[i] = i;</span><br><span class="line">        sort(b + <span class="number">1</span>, b + <span class="number">1</span> + n);</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>, sm = <span class="number">0</span>, b1 = <span class="number">0</span>, b2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] &gt; a[j]) &#123;</span><br><span class="line">                    cnt ++; b1 = i; b2 = j;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (a[i] == a[j]) sm = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!sm &amp;&amp; cnt &amp; <span class="number">1</span>) &#123; <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (b[i].first == b[i - <span class="number">1</span>].first) &#123;</span><br><span class="line">                        swap(b[i].second, b[i - <span class="number">1</span>].second);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">            Solve(n);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans.<span class="built_in">size</span>());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);    </span><br><span class="line">            &#125; <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Multiplication-4&quot;&gt;&lt;a href=&quot;#Multiplication-4&quot; class=&quot;headerlink&quot; title=&quot;Multiplication 4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://atcoder.jp/contests/a
      
    
    </summary>
    
    
      <category term="Code" scheme="http://yoursite.com/categories/Code/"/>
    
    
      <category term="Atcoder" scheme="http://yoursite.com/tags/Atcoder/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/08/01/hello-world/"/>
    <id>http://yoursite.com/2020/08/01/hello-world/</id>
    <published>2020-08-01T08:11:18.354Z</published>
    <updated>2020-08-01T08:11:18.354Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
